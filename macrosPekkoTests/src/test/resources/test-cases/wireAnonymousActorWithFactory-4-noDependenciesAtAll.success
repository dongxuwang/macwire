import org.apache.pekko.actor.{Actor, ActorSystem, Props}
import com.softwaremill.macwire.pekkosupport._

/**
  * In this example I am constructing simple actor without dependencies.
  */

trait A

class SomeActor(a: A) extends Actor {
  override def receive: Receive = {
    case m => //println(m)
  }
}

object SomeActor {
  def get() = new SomeActor(new A{})
}

lazy val a: A = throw new UnsupportedOperationException()

val system = ActorSystem("wireAnonymousActorWithFactory-4-noDependenciesAtAll")
AfterAllTerminate(system)

val someActor = wireAnonymousActorWith(SomeActor.get _)

someActor ! "Hey someActor"

